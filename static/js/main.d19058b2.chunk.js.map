{"version":3,"sources":["components/ChannelItem/ChannelItem.tsx","components/LeftSideBar/LeftSideBar.tsx","components/SendMessageBox/SendMessageBox.tsx","components/Message/Message.tsx","components/MiddleSection/MiddleSection.tsx","components/RightSideBar/RightSideBar.tsx","components/ChatApp/ChatApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChannelItem","className","LeftSideBar","SendMessageBox","onSendMessage","useState","message","setMessage","onSubmit","event","target","reset","preventDefault","type","onChange","value","Message","MiddleSection","messages","map","key","messageId","RightSideBar","globalOpenChannel","queryString","window","location","search","console","log","urlParams","URLSearchParams","userId","get","channelId","channelUrl","appId","ChatApp","sb","SendBird","setMessages","getChannelAndEnter","OpenChannel","getChannel","openChannel","error","enter","response","ChannelHandler","onMessageReceived","channel","addChannelHandler","createChannelCb","url","useEffect","connect","user","createChannel","sendUserMessage","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d19058b2.chunk.js","sourcesContent":["import React from 'react';\nimport './ChannelItem.scss';\n\nfunction ChannelItem() {\n    return (\n        <div className=\"ChannelItem\">\n\n        </div>\n    );\n}\n\nexport default ChannelItem;","import React from 'react';\nimport './LeftSideBar.scss';\nimport ChannelItem from '../ChannelItem/ChannelItem';\n\nfunction LeftSideBar() {\n    return (\n        <div className=\"LeftSideBar\">\n            <ChannelItem />\n        </div>\n    );\n}\n\nexport default LeftSideBar;","import React, {useState} from 'react';\nimport './SendMessageBox.scss';\n\nfunction SendMessageBox({ onSendMessage }) {\n\n    const [message, setMessage] = useState('');\n\n    const getInputValue = (event) => {\n        setMessage(event.target.value);\n    };\n\n    const onSendClicked = (event) => {\n        event.target.reset();\n        event.preventDefault();\n        onSendMessage(message);\n        setMessage('');\n    };\n\n    return (\n        <form className=\"SendMessageBox\" onSubmit={onSendClicked}>\n            <input\n                className=\"message-control\"\n                type=\"text\"\n                onChange={getInputValue}\n            />\n            <button\n                className=\"send\"\n                type=\"submit\"\n            >Send</button>\n        </form>\n    );\n}\n\nexport default SendMessageBox;","import React from 'react';\nimport './Message.scss';\n\nfunction Message( { message } ) {\n    return (\n        <div className=\"Message\">\n            {message.message}\n        </div>\n    );\n}\n\nexport default Message;","import React from 'react';\nimport './MiddleSection.scss';\nimport SendMessageBox from '../SendMessageBox/SendMessageBox';\nimport Message from '../Message/Message';\nimport {AdminMessage, FileMessage, UserMessage} from 'sendbird';\n\nfunction MiddleSection({ onSendMessage, messages }) {\n    return (\n        <div className=\"MiddleSection\">\n            {messages.map((message: UserMessage | FileMessage | AdminMessage) => <Message key={message.messageId} message={message} />)}\n            <SendMessageBox onSendMessage={onSendMessage} />\n        </div>\n    );\n}\n\nexport default MiddleSection;","import React from 'react';\nimport './RightSideBar.scss';\n\nfunction RightSideBar() {\n    return (\n        <div className=\"RightSideBar\"></div>\n    );\n}\n\nexport default RightSideBar;","import React, {useEffect, useState} from 'react';\nimport SendBird, {AdminMessage, FileMessage, OpenChannel, UserMessage} from 'sendbird';\nimport LeftSideBar from '../LeftSideBar/LeftSideBar';\nimport MiddleSection from '../MiddleSection/MiddleSection';\nimport RightSideBar from '../RightSideBar/RightSideBar';\nimport './ChatApp.scss';\n\nlet globalOpenChannel: OpenChannel;\n\nconst queryString = window.location.search;\nconsole.log(queryString);\nconst urlParams = new URLSearchParams(queryString);\nconst userId = urlParams.get('userid') ?? 'fallbackUser';\nconst channelId = urlParams.get('channelid') ?? 'fallbackChannel';\nconst channelUrl = urlParams.get('channelurl') ?? '';\nconst appId = urlParams.get('appid') ?? '';\n\nfunction ChatApp() {\n    const sb = new SendBird({appId: appId});\n\n    const [messages, setMessages] = useState([] as any[]);\n\n    const getChannelAndEnter = (channelUrl) => {\n        sb.OpenChannel.getChannel(channelUrl, function(openChannel, error) {\n            if (error) {\n                return;\n            }\n            console.log('the channel we get', openChannel);\n            globalOpenChannel = openChannel;\n            openChannel.enter(function(response, error) {\n                if (error) {\n                    return;\n                }\n                console.log('response', response);\n                const ChannelHandler = new sb.ChannelHandler();\n\n                ChannelHandler.onMessageReceived = function(channel, message) {\n                    console.log('MESSAGE RECEIVED!', channel, message);\n                    setMessages(messages => [...messages, message]);\n                };\n\n                sb.addChannelHandler(channelId, ChannelHandler);\n                console.log('added listener to message received');\n\n            });\n        });\n    };\n\n    const createChannelCb = (openChannel: OpenChannel, error: any) => {\n        if (error) console.log('error!', error);\n        console.log('chanel created!', openChannel);\n        getChannelAndEnter(openChannel.url);\n    };\n\n\n    const onSendMessage = (message: string) => {\n        globalOpenChannel.sendUserMessage(message, '', '', function(message, error) {\n            if (error) {\n                return;\n            }\n            setMessages( messages => [...messages, message]);\n        });\n    };\n\n    useEffect(() => {\n        console.log('useEffect');\n        sb.connect(userId, (user, error) => {\n            if (error) console.log('error!', error);\n            console.log('connected!');\n            if (!channelUrl) {\n                sb.OpenChannel.createChannel(\n                    channelId,\n                    '',\n                    '',\n                    [],\n                    '',\n                    createChannelCb\n                );\n            } else {\n                getChannelAndEnter(channelUrl);\n            }\n\n        });\n\n    }, []);\n\n    return (\n        <div className=\"ChatApp\">\n            <LeftSideBar />\n            <MiddleSection onSendMessage={onSendMessage} messages={messages} />\n            <RightSideBar />\n        </div>\n    );\n}\n\nexport default ChatApp;","import React from 'react';\nimport './App.css';\nimport ChatApp from './components/ChatApp/ChatApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChatApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}